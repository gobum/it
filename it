#!/usr/bin/env node

/** -----------------------------------------------------------------------------------------------
 * print.js for nodejs
 */

var print = function (format, recolors, colors, redent) {
  return function print(args, space) {
    args = format.apply(undefined, args);

    args = args.replace(recolors, function (s, id) {
      return colors[id];
    }) + colors[0];

    args = args.replace(redent, space);

    console.log(args);
  }
}(
  /* format: */ require("util").format,
  /* recolors: */ /#([rgybmcs0#])/g,
  /* colors: */ {
    0: "\x1b[0m",   // RESET
    r: "\x1b[31m",  // red
    g: "\x1b[32m",  // green
    y: "\x1b[33m",  // yellow
    b: "\x1b[34m",  // blue
    m: "\x1b[35m",  // magenta
    c: "\x1b[36m",  // cyan
    s: "\x1b[90m",  // silver
    "#": "#"        // ESCAPE
  },
  /* redent: */ /^/gm
);


/** -----------------------------------------------------------------------------------------------
 * src.js
 */

var fs = require("fs");

function source() {
  var trace = _where_(2);
  var lines = getlines(trace.loc);
  var source = lines[trace.row];
  return source ? source.trim() : "< no topic >";
}

function _where_(deep) {
  var stack = Error().stack.split("\n"), ms;
  for (var i = 0, line; line = stack[i++];) {
    if (line.match(reWhere)) break;
  }
  if (i < stack.length && (ms = String(stack[i + deep]).match(reHere))) {
    return {
      loc: ms[1],
      row: ms[2] - 1
    };
  }
}
var reWhere = RegExp('\\b' + _where_.name + '\\b');
var reHere = /((?:https?:\/\/[\w.-]+(?::\d+)?|)[\w./@-]+(?:\?.*|)):(\d+):(\d+)/;

function getlines(path) {
  if (path in getlines) {
    path = getlines[path];
  }
  else {
    path = getlines[path] = get(path).split("\n");
  }
  return path;
}

function get(path) {
  return fs.readFileSync(path, "utf-8");
}


/** -----------------------------------------------------------------------------------------------
 * it.js
 *   测试驱动框架
 */

function It(parent) {
  function it(value, func) {
    if (typeof func === "function") {
      it.promise = it.promise.then(function () {
        it.log(value);
        var child = It(it);
        return Promise.resolve(func(child)).then(function(){
          return child.promise;
        });
      }).catch(function (error) {
        print(["#r⦸ %s", error && error.message || error], it.space + "  ");
      });
    }
    else {
      it.log(value ? "#g✔ %s" : "#r✘ %s", source());
    }
  }

  it.space = parent ? parent.space + "  " : "";

  it.promise = Promise.resolve();

  it.log = function() {
    print(arguments, it.space);
  }

  it.delay = function (time, value) {
    return new Promise(function (resolve) {
      setTimeout(resolve, time, value);
    });
  }

  return it;
}

/** -----------------------------------------------------------------------------------------------
 * it
 */
var path = require("path");

var files = process.argv.slice(2);
if (files.length) {
  global.it = It(null);   // root it
  
  files.map(function (file) {
    file = path.resolve(file);
    file = path.relative(__dirname, file);
    if (/^[^./]/.test(file)) {
      file = "./" + file;
    }
    require(file);
  });
}
