#!/usr/bin/env node

/** -----------------------------------------------------------------------------------------------
 * print.js for nodejs
 */

var print = function (format, recolors, colors, redent) {
  return function print(args, space) {
    args = format.apply(undefined, args);

    args = args.replace(recolors, function (s, id) {
      return colors[id];
    }) + colors[0];

    args = args.replace(redent, space);

    console.log(args);
  }
}(
  /* format: */ require("util").format,
  /* recolors: */ /#([rgybmcs0#])/g,
  /* colors: */ {
    0: "\x1b[0m",   // RESET
    r: "\x1b[31m",  // red
    g: "\x1b[32m",  // green
    y: "\x1b[33m",  // yellow
    b: "\x1b[34m",  // blue
    m: "\x1b[35m",  // magenta
    c: "\x1b[36m",  // cyan
    s: "\x1b[90m",  // silver
    "#": "#"        // ESCAPE
  },
  /* redent: */ /^/gm
);


/** -----------------------------------------------------------------------------------------------
 * trace.js
 *   代码定位信息
 */

var trace = function (reWhere, reHere) {
  return function _where_(deep) {
    var stack = Error().stack.split("\n"), ms;
    for (var i = 0, line; line = stack[i++];) {
      if (line.match(reWhere)) break;
    }
    if (i < stack.length && (ms = String(stack[i + deep]).match(reHere))) {
      return {
        file: ms[1],
        row: ms[2] - 1
      };
    }
  };
}(
  /* reWhere: */ /\b_where_\b/,
  /* reHere: */ /((?:https?:\/\/[\w.-]+(?::\d+)?|)[\w./@-]+(?:\?.*|)):(\d+):(\d+)/
);

/** -----------------------------------------------------------------------------------------------
 * src.js
 */

var src = function(fs) {
  return function(file, row, len) {
    var rows = getrows(file);
    var source = rows[row];
    return source ? source.trim() : "< no topic >";
  }

  function getrows(file) {
    if (file in getrows) {
      file = getrows[file];
    }
    else {
      file = getrows[file] = get(file).split("\n");
    }
    return file;
  }
  
  function get(file) {
    return fs.readFileSync(file, "utf-8");
  }
    
}(require("fs"));


/** -----------------------------------------------------------------------------------------------
 * it.js
 *   测试驱动框架
 */

function It(parent, topic, func) {
  var space = parent ? parent.space + "  " : "";
  var jobs = [];
  var totalJobs = 0;

  function it(value, func) {
    if (typeof func === "function") {
      jobs[totalJobs++] = It(it, value, func);
    }
    else {
      func = trace(1);
      func = src(func.file, func.row, 1);
      log(value ? "#g✔ %s" : "#r✘ %s", func);
    }
  }

  return Object.defineProperties(it, {
    space: { value: space },
    run: { value: run },
    log: { value: log },
    delay: { value: delay }
    // sum() log("#bΣ Total: %d, okey: %d, fail: %d", totalJobs, okeyJobs, failJobs);
  });

  function run() {
    var promise = Promise.resolve(), i = 0;
    if (func) {
      promise = promise.then(function () {
        parent.log(topic);
        return func(it);
      }).catch(function (error) {
        log("#r⦸ %s", error && error.message || error);
      });
    }

    return promise.then(function next(job) {
      if (job = jobs[i++]) {
        return job.run().then(next);
      }
    });
  }

  function log() {
    print(arguments, space);
  }

  function delay(time, value) {
    return new Promise(function (resolve) {
      setTimeout(resolve, time, value);
    });
  }
}

/** -----------------------------------------------------------------------------------------------
 * it
 */
var path = require("path");

var files = process.argv.slice(2);
if (files.length) {
  global.it = It();   // root it
  it.run();
  
  files.map(function (file) {
    file = path.resolve(file);
    file = path.relative(__dirname, file);
    if (/^[^./]/.test(file)) {
      file = "./" + file;
    }
    require(file);
  });
}
