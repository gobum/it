#!/usr/bin/env node

/** -----------------------------------------------------------------------------------------------
 * print.js for nodejs
 */

var print = function (format, recolors, colors, redent) {
  return function print(args, space) {
    args = format.apply(undefined, args);

    args = args.replace(recolors, function (s, id) {
      return colors[id];
    }) + colors[0];

    args = args.replace(redent, space);

    console.log(args);
  }
}(
  /* format: */ require("util").format,
  /* recolors: */ /#([rgybmcs0#])/g,
  /* colors: */ {
    0: "\x1b[0m",   // RESET
    r: "\x1b[31m",  // red
    g: "\x1b[32m",  // green
    y: "\x1b[33m",  // yellow
    b: "\x1b[34m",  // blue
    m: "\x1b[35m",  // magenta
    c: "\x1b[36m",  // cyan
    s: "\x1b[90m",  // silver
    "#": "#"        // ESCAPE
  },
  /* redent: */ /^/gm
);


/** -----------------------------------------------------------------------------------------------
 * trace.js
 *   代码定位信息
 */

var trace = function (reWhere, reHere) {
  return function _where_(deep) {
    var stack = Error().stack.split("\n"), ms;
    for (var i = 0, line; line = stack[i++];) {
      if (line.match(reWhere)) break;
    }
    if (i < stack.length && (ms = String(stack[i + deep]).match(reHere))) {
      return {
        file: ms[1],
        row: ms[2] - 1
      };
    }
  };
}(
  /* reWhere: */ /\b_where_\b/,
  /* reHere: */ /((?:https?:\/\/[\w.-]+(?::\d+)?|)[\w./@-]+(?:\?.*|)):(\d+):(\d+)/
);

/** -----------------------------------------------------------------------------------------------
 * src.js
 */

var src = function(fs) {
  return function(file, row, len) {
    var rows = getrows(file);
    var source = rows[row];
    return source ? source.trim() : "< no topic >";
  }

  function getrows(file) {
    if (file in getrows) {
      file = getrows[file];
    }
    else {
      file = getrows[file] = get(file).split("\n");
    }
    return file;
  }
  
  function get(file) {
    return fs.readFileSync(file, "utf-8");
  }
    
}(require("fs"));

/** -----------------------------------------------------------------------------------------------
 * assert.js
 *   原始断言类
 */

function Assert(value) {
  return Object.setPrototypeOf({
    value: value,
    trace: trace(2)
  }, Assert.prototype);
}


/** -----------------------------------------------------------------------------------------------
 * job.js
 *   任务调度框架
 */

function Job(parent) {
  var space = parent ? parent.space + "  " : "";
  var jobspace = space + "  ";
  var assert = null;
  var job = {
    it: it,
    
    chain() { return chain; },
    reassert: reassert,
    space: space,

    time: Date.now(),
    totalJobs: 0,
    okeyJobs: 0,
    failJobs: 0
  }

  var chain = Promise.resolve();  //.then(reassert, reassert);

  function it(value, func) {
    reassert();
    if (typeof func === "function") {
      job.totalJobs++;
      chain = chain.then(function () {
        log(value);
        var child = Job(job);
        value = func(child.it);
        return Promise.resolve(value)
          .then(child.reassert, child.reassert)
          .then(child.chain);
      }).then(function () {
        job.okeyJobs++;
      }).catch(function (error) {
        job.failJobs++;
        joblog("#r⦸ %s", error && error.message || error);
      });
    }
    else {
      assert = Assert(value);
    }
  }

  function reassert(error) {
    if(assert) {
      if(assert instanceof Assert) {
        var topic = src(assert.trace.file, assert.trace.row, 1);
        log(assert.value ? "#g✔ %s" : "#r✘ %s", topic);            
      }
      assert = null;
    }
    if(error) {
      throw error;
    }
  }

  it.log = function () {
    reassert();
    print(arguments, space);
  }

  it.delay = function (time, value) {
    reassert();
    return new Promise(function (resolve) {
      setTimeout(resolve, time, value);
    });
  }

  it.sum = function () {
    reassert();
    chain = chain.then(function () {
      // it.log("#b✈ Total: %d, okey: %d, fail: %d", job.totalJobs, job.okeyJobs, job.failJobs);
      log("#bΣ Total: %d, okey: %d, fail: %d", job.totalJobs, job.okeyJobs, job.failJobs);
    });
  }

  function log() {
    print(arguments, space);
  }

  function joblog() {
    print(arguments, jobspace);
  }
   
  return job;
}

/** -----------------------------------------------------------------------------------------------
 * it
 */
var path = require("path");

var files = process.argv.slice(2);
if (files.length) {
  global.it = Job(null, Function.prototype).it;   // root it
  
  files.map(function (file) {
    file = path.resolve(file);
    file = path.relative(__dirname, file);
    if (/^[^./]/.test(file)) {
      file = "./" + file;
    }
    require(file);
  });
}
