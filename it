#!/usr/bin/env node

/**
 * tagof(any): string
 *   获取任意值的标签
 */
var tagof = function(toString, reTag){
  return function(any) {
    return toString.call(any).match(reTag)[1];
  }
}(Object.prototype.toString, /\[object ([^\]]+)/);

/** -----------------------------------------------------------------------------------------------
 * print.js for nodejs
 */

var print = function (format, recolors, colors, redent) {
  return function print(args, space) {
    args = format.apply(undefined, args);

    args = args.replace(recolors, function (s, id) {
      return colors[id];
    }) + colors[0];

    args = args.replace(redent, space);

    console.log(args);
  }
}(
  /* format: */ require("util").format,
  /* recolors: */ /#([rgybmcs0#])/g,
  /* colors: */ {
    0: "\x1b[0m",   // RESET
    r: "\x1b[31m",  // red
    g: "\x1b[32m",  // green
    y: "\x1b[33m",  // yellow
    b: "\x1b[34m",  // blue
    m: "\x1b[35m",  // magenta
    c: "\x1b[36m",  // cyan
    s: "\x1b[90m",  // silver
    "#": "#"        // ESCAPE
  },
  /* redent: */ /^/gm
);


/** -----------------------------------------------------------------------------------------------
 * trace.js
 *   代码定位信息
 */

var trace = function (reWhere, reHere) {
  return function _where_(deep) {
    var stack = Error().stack.split("\n"), ms;
    for (var i = 0, line; line = stack[i++];) {
      if (line.match(reWhere)) break;
    }
    if (i < stack.length && (ms = String(stack[i + deep]).match(reHere))) {
      return {
        file: ms[1],
        row: ms[2] - 1
      };
    }
  };
}(
  /* reWhere: */ /\b_where_\b/,
  /* reHere: */ /((?:https?:\/\/[\w.-]+(?::\d+)?|)[\w./@-]+(?:\?.*|)):(\d+):(\d+)/
);

/** -----------------------------------------------------------------------------------------------
 * src.js
 */

var src = function(fs) {
  return function(file, row, len) {
    var rows = getrows(file);
    var source = rows[row];
    return source ? source.trim() : "< no topic >";
  }

  function getrows(file) {
    if (file in getrows) {
      file = getrows[file];
    }
    else {
      file = getrows[file] = get(file).split("\n");
    }
    return file;
  }
  
  function get(file) {
    return fs.readFileSync(file, "utf-8");
  }
    
}(require("fs"));


/** -----------------------------------------------------------------------------------------------
 * it.js
 *   测试驱动框架
 */

var it = (function () {
  function jobify(func, parent, topic) {
    func.parent = parent;
    func.space = parent ? parent.space + "  " : "";
    func.topic = topic;
    func.jobs = [];
    func.out = _out;
    return func;
  }

  function it(any, func) {
    var job = itsjob(it);

    if (typeof any === "string" && typeof func === "function") {
      job.jobs.push(jobify(func, job, any));
      return tagof(func) === "Function"
        ? {
          then(callback) {
            jobify(callback, job);
            func.callback = callback;
            return {
              in(time) {
                func.time = time;
              }
            };
          }
        }
        : {
          in(time) {
            func.time = time;
          }
        };
    }
    else {
      func = trace(1);
      func = src(func.file, func.row, 1);
      job.out(any ? "#g✓ %s" : "#r✗ %s", func);
    }
  }

  jobify(it);

  it.run = function () {
    runs(it.jobs);
  }

  it.log = function log() {
    var job = itsjob(log);
    print(arguments, job.space);
  };

  it.delay = function (time, value) {
    return new Promise(function (resolve) {
      setTimeout(resolve, time, value);
    });
  };

  function itsjob(it) {
    return it.caller ? it.caller.jobs ? it.caller : it : it;
  }

  function runs(jobs, i) {
    i = 0;
    return Promise.resolve().then(function next(job) {
      if (job = jobs[i++]) {
        return run(job).then(next);
      }
    });
  }

  function run(job) {
    var promise = new Promise(function(resolve, reject) {
      job.parent.out(job.topic);
      if(job.callback) {
        job(resolve, reject);
      }
      else {
        resolve(job());
      }
    });
    if(job.callback) {
      promise = promise.then(job.callback);
    }
    promise = promise.catch(function(error){
      job.out("#r⦸ %s", error && error.message || error);
    }).then(function(){
      return runs(job.jobs);
    });
    if(job.callback) {
      promise = promise.then(function(){
        return runs(job.callback.jobs);
      });
    }

    return promise;
  }

  function _out() {
    print(arguments, this.space);
  }

  return it;
})();


/** -----------------------------------------------------------------------------------------------
 * it
 */
var path = require("path");

var files = process.argv.slice(2);
if (files.length) {
  global.it = it;   // root it
  it.run();
  
  files.map(function (file) {
    file = path.resolve(file);
    file = path.relative(__dirname, file);
    if (/^[^./]/.test(file)) {
      file = "./" + file;
    }
    require(file);
  });
}
