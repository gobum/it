#!/usr/bin/env node

/**
 * tagof(any): string
 *   获取任意值的标签
 */
var tagof = function(toString, reTag){
  return function(any) {
    return toString.call(any).match(reTag)[1];
  }
}(Object.prototype.toString, /\[object ([^\]]+)/);

var indent = function (regexp) {
  return function (text, dent) {
    text = String(text);
    dent = dent | 0;
    if (dent > 0) {
      text = text.replace(regexp, " ".repeat(dent));
    }
    else if (dent < 0) {
      dent = RegExp("^ {1," + -dent + "}", "gm");
      text = text.replace(dent, "");
    }
    return text;
  }
}(/^/gm);

var dentof = function (regexp) {
  return function (text) {
    text = String(text);
    var dents = text.match(regexp);
    return dents
      ? dents.reduce(function (min, str) {
        return (str = str.length) < min ? str : min;
      }, text.length)
      : 0;
  }
}(/^ *(?=\S)/gm);


/** -----------------------------------------------------------------------------------------------
 * print.js for nodejs
 */

var print = function (format, recolors, colors) {
  return function print(args, dent) {
    args = format.apply(undefined, args);

    args = args.replace(recolors, function (s, id) {
      return colors[id];
    }) + colors[0];

    args = indent(args, dent);

    console.log(args);
  }
}(
  /* format: */ require("util").format,
  /* recolors: */ /#([rgybmcs0#])/g,
  /* colors: */ {
    0: "\x1b[0m",   // RESET
    r: "\x1b[31m",  // red
    g: "\x1b[32m",  // green
    y: "\x1b[33m",  // yellow
    b: "\x1b[34m",  // blue
    m: "\x1b[35m",  // magenta
    c: "\x1b[36m",  // cyan
    s: "\x1b[90m",  // silver
    "#": "#"        // ESCAPE
  }
);


/** -----------------------------------------------------------------------------------------------
 * trace.js
 *   代码定位信息
 */

var tracehead = function (reWhere, reHere) {
  return function _where_(deep) {
    var stack = Error().stack.split("\n"), ms;
    for (var i = 0, line; line = stack[i++];) {
      if (line.match(reWhere)) break;
    }
    if (i < stack.length && (ms = String(stack[i + deep]).match(reHere))) {
      return {
        file: ms[1],
        row: ms[2] - 1
      };
    }
  };
}(
  /* reWhere: */ /\b_where_\b/,
  /* reHere: */ /((?:https?:\/\/[\w.-]+(?::\d+)?|)[\w./@-]+(?:\?.*|)):(\d+):(\d+)/
);

function tracetail(file, row) {
  var reFile = RegExp(file + ":(\\d+):(\\d+)");
  var stack = Error().stack.split("\n"), ms;
  for (var i = 0, line; line = stack[i++];) {
    if (ms = line.match(reFile)) {
      if (ms[1] > row) {
        return { row: ms[1] };
      }
    }
  }
}



/** -----------------------------------------------------------------------------------------------
 * src.js
 */

var src = function(fs) {
  return function(file, head, tail) {
    var source;
    var rows = getrows(file);
    if(rows) {
      source = rows.slice(head, tail).join("\n");
      source = indent(source, -dentof(source));
    }
    return source || "<codeless>";
  }

  function getrows(file) {
    var rows;
    if (file in getrows) {
      rows = getrows[file];
    }
    else {
      rows = getrows[file] = get(file).split("\n");
    }
    return rows;
  }
  
  function get(file) {
    try {
      file = fs.readFileSync(file, "utf-8");
    }
    catch(e) {
      file = "";
    }
    return file;
  }
    
}(require("fs"));


/** -----------------------------------------------------------------------------------------------
 * assert.js
 *   原始断言类
 */

function Assert(job, any) {
  return Object.setPrototypeOf({
    job: job,
    any: any,
    _not: 0,
    head: tracehead(2),
    state: 0
  }, Assert.prototype);
}

Assert.prototype = {
  get desc() {
    return this.topic || this.source;
  },

  get source() {
    var head = this.head;
    if(head) {
      var file = head.file, row = head.row;
      var tail = tracetail(file, row);
      if(tail) {
        return src(file, row, tail.row);
      }
    }
    return "<codeless>";
  },

  get ok() {
    if(this.any && !this._not) {
      this.state = 1;
    }
    else {
      this.state = -1;
      // this.reason = inspect(this.any) + as_is_ok(this._not);
    }
    this.report();
  },

  report() {
    var state = this.state;
    var desc = indent(this.desc, 2).trim();
    if(state>0) {
      desc = "#g✓ " + desc;
    }
    else if(state<0) {
      desc = "#r✗ " + desc;
      if(this.reason) {
        desc += "\n#s" + ident(this.reson, 2);
      }
    }
    else {
      desc = "#y " + desc;
    }
    this.job.out(desc);
  }
}



/** -----------------------------------------------------------------------------------------------
 * it.js
 *   测试驱动框架
 */

var it = (function () {
  function it(any, func) {
    var job = it.job;

    if (typeof any === "string" && typeof func === "function") {
      var child = Job(func, job, any);
      job.add(child);
      return tagof(func) === "Function"
        ? {
          then(func) {
            child.callback = Job(func, job);
            return { in: child.in };
          }
        }
        : {
          in: child.in
        };
    }
    else {
      // func = trace(1);
      // func = src(func.file, func.row, 1);
      // job.out(any ? "#g✓ %s" : "#r✗ %s", func);
      return Assert(job, any);
    }
  }

  it.log = function log() {
    it.job.out.apply(undefined, arguments);
  };

  it.delay = function (time, value) {
    return new Promise(function (resolve) {
      setTimeout(resolve, time, value);
    });
  };

  function Job(job, parent, topic) {
    job.parent = parent;
    var dent = job.dent = parent ? parent.dent + 2 : 0;
    var jobs = [];
    var totalJobs = 0;
    var time = 0;
    job.add = jobs.push.bind(jobs);
    job.run = run;
    job.jobs = runs;
    job.out = out;
    job.in = function (_time) { time = _time };
    return job;

    function runs() {
      var job = it.job, i = 0;
      return Promise.resolve().then(function next(job) {
        if (job = jobs[i++]) {
          return job.run().then(next);
        }
      }).then(
        function () {
          it.job = job;
        },
        function(error) {
          it.job = job;
          throw error;
        }
      );
    }

    function run() {
      var promise = new Promise(function (resolve, reject) {
        parent.out(topic);
        it.job = job;
        if (job.callback) {
          job(resolve, reject);
        }
        else {
          resolve(job());
        }
      });

      if (time) {
        var timeout;
        promise = Promise.race([
          promise.then(
            function (value) {
              clearTimeout(timeout);
              return value;
            },
            function (error) {
              clearTimeout(timeout);
              throw error;
            }
          ),
          new Promise(function (resolve, reject) {
            timeout = setTimeout(reject, time, Error("Timeout " + time + "ms!"));
          })
        ]);
      }

      if (job.callback) {
        promise = promise.then(job.callback);
      }
      promise = promise.catch(function (error) {
        out("#r⦸ %s", error && error.message || error);
      }).then(runs);
      if (job.callback) {
        promise = promise.then(job.callback.jobs);
      }
      return promise;
    }

    function out() {
      print(arguments, dent);
    }

    function settle() {

    }
  }

  return Job(it.job = it);
})();


/** -----------------------------------------------------------------------------------------------
 * it
 */
var path = require("path");

var files = process.argv.slice(2);
if (files.length) {
  global.it = it;   // root it
  it.jobs();
  
  files.map(function (file) {
    file = path.resolve(file);
    file = path.relative(__dirname, file);
    if (/^[^./]/.test(file)) {
      file = "./" + file;
    }
    require(file);
  });
}
